package com.example.android.todoapp.fragments.update

import android.app.AlertDialog
import android.os.Bundle
import android.view.*
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.example.android.todoapp.R
import com.example.android.todoapp.data.model.ToDoData
import com.example.android.todoapp.databinding.FragmentUpdateBinding
import com.example.android.todoapp.viewmodel.SharedViewModel
import com.example.android.todoapp.viewmodel.ToDoViewModel
import kotlinx.android.synthetic.main.fragment_update.*
import kotlinx.android.synthetic.main.fragment_update.view.*

class UpdateFragment : Fragment() {

    //note: UpdateFragmentArgs is generated by system
    private val args by navArgs<UpdateFragmentArgs>()

    private var _binding: FragmentUpdateBinding? = null
    private val binding get() = _binding!!

    private val toDoViewModel: ToDoViewModel by viewModels()
    private val mSharedViewModel: SharedViewModel by viewModels()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        _binding = FragmentUpdateBinding.inflate(inflater, container, false)

        //getting args and bind to xml
        binding.args = args

        binding.spinnerUpdatePriorities.onItemSelectedListener = mSharedViewModel.listener

        //menu
        setHasOptionsMenu(true)

        return binding.root
    }

    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        inflater.inflate(R.menu.update_fragment_menu, menu)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.menu_save -> updateItem()
            R.id.menu_delete -> confirmItemToRemove()
        }
        return super.onOptionsItemSelected(item)
    }

    private fun confirmItemToRemove() {
        val builder = AlertDialog.Builder(requireContext())
        builder.setTitle(getString(R.string.dialog_title, args.currentItem.title))
        builder.setMessage(R.string.dialog_message)
        builder.setPositiveButton(R.string.label_yes) { _, _ ->
            toDoViewModel.deleteData(args.currentItem)
            Toast.makeText(
                requireContext(),
                "${getString(R.string.msg_successfully_removed)}: ${args.currentItem.title}",
                Toast.LENGTH_SHORT
            ).show()
            findNavController().navigate(R.id.action_updateFragment_to_listFragment)
        }
        builder.setNegativeButton(R.string.label_no) { dialog, _ ->
            dialog.dismiss()
        }
        builder.create().show()
    }

    private fun updateItem() {
        val title = et_update_title.text.toString()
        val description = et_update_description.text.toString()
        val getPriority = spinner_update_priorities.selectedItem.toString()

        val validation = mSharedViewModel.verifyDataFromUser(title, description)
        if (validation) {
            val updatedItem = ToDoData(
                args.currentItem.id,
                title,
                mSharedViewModel.parsePriority(getPriority),
                description
            )

            //call update method
            toDoViewModel.updateData(updatedItem)
            Toast.makeText(requireContext(), R.string.msg_successfully_updated, Toast.LENGTH_SHORT)
                .show()

            //back to list fragment
            findNavController().navigate(R.id.action_updateFragment_to_listFragment)
        } else {
            Toast.makeText(requireContext(), R.string.msg_fill_all_fields, Toast.LENGTH_SHORT)
                .show()
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

}